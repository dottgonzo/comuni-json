"use strict";
var Comuni = require("./comuni.json");
var _ = require("lodash");
var async = require("async");
var fs = require("fs");
var geocoder = require("search-google-geocode");
var options = {
    language: 'it'
};
var all = Comuni;
var test = [all[0], all[3], all[4]];
var use = all;
async.eachSeries(use, function (iterate, cb) {
    function callbackGeo(error, result) {
        if (error) {
            console.log(error);
        }
        else {
            if (result && result.length && result[0]) {
                _.map(Object.keys(result[0]), function (k) {
                    iterate[k] = result[0][k];
                });
                fs.writeFileSync("./comuni.json", JSON.stringify(use), { encoding: "utf-8" });
                console.log("ok " + iterate.nome + " " + iterate.sigla);
            }
            else {
                console.warn("WARN " + iterate.nome + " " + iterate.sigla);
            }
        }
        ;
        cb();
    }
    if (!iterate.latitude) {
        geocoder.geocode(iterate.nome, callbackGeo, options);
    }
    else {
        console.log("exists " + iterate.nome);
        cb();
    }
}, function (err) {
    if (err) {
    }
    else {
        console.log("ok");
    }
});

//# sourceMappingURL=data:application/json;base64,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ZSB7XG4gICAgbm9tZTogc3RyaW5nO1xuICAgIGNvZGljZTogbnVtYmVyO1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgem9uYToge1xuICAgICAgICBub21lOiBzdHJpbmc7XG4gICAgICAgIGNvZGljZTogbnVtYmVyO1xuICAgIH0sXG4gICAgcmVnaW9uZToge1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgIH0sXG4gICAgY206IHtcbiAgICAgICAgY29kaWNlOiBzdHJpbmc7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICB9LFxuICAgIHByb3ZpbmNpYToge1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgIH0sXG4gICAgc2lnbGE6IHN0cmluZztcbiAgICBjb2RpY2VDYXRhc3RhbGU6IHN0cmluZztcbiAgICBjYXA6IG51bWJlcjtcbn1cblxuXG5cbmxldCBDb211bmk6IElDb211bmVbXSA9IHJlcXVpcmUoXCIuL2NvbXVuaS5qc29uXCIpO1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCAqIGFzIGFzeW5jIGZyb20gXCJhc3luY1wiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5cbmxldCBnZW9jb2RlciA9IHJlcXVpcmUoXCJzZWFyY2gtZ29vZ2xlLWdlb2NvZGVcIik7XG4vLyB5b3UgY2FuIHVzZSBHb29nbGUgb3B0aW9ucyB0byBtYW5hZ2UgcmVzdWx0IGZvcm1hdCBcbnZhciBvcHRpb25zID0ge1xuICAgIGxhbmd1YWdlOiAnaXQnXG59O1xuY29uc3QgYWxsID0gQ29tdW5pO1xuY29uc3QgdGVzdCA9IFthbGxbMF0sIGFsbFszXSwgYWxsWzRdXVxuXG4vLyB1c2UgY2FsbGJhY2sgdG8gcmV0dXJuIHJlc3VsdCBmcm9tIGdlb2NvZGluZyBwcm9jZXNzXG5cbmNvbnN0IHVzZSA9IGFsbDtcblxuLy8gYWRkcmVzcyBnZW9jb2Rpbmdcbi8vIHJldmVyc2UgZ2VvY29kaW5nXG5hc3luYy5lYWNoU2VyaWVzKHVzZSwgZnVuY3Rpb24gKGl0ZXJhdGUsIGNiKSB7XG5cblxuICAgIGZ1bmN0aW9uIGNhbGxiYWNrR2VvKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCAmJiByZXN1bHRbMF0pIHtcbiAgICAgICAgICAgICAgICBfLm1hcChPYmplY3Qua2V5cyhyZXN1bHRbMF0pLCBmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRlW2tdID0gcmVzdWx0WzBdW2tdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKFwiLi9jb211bmkuanNvblwiLCBKU09OLnN0cmluZ2lmeSh1c2UpLCB7IGVuY29kaW5nOiBcInV0Zi04XCIgfSlcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9rIFwiICsgaXRlcmF0ZS5ub21lICsgXCIgXCIgKyBpdGVyYXRlLnNpZ2xhKVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIldBUk4gXCIgKyBpdGVyYXRlLm5vbWUgKyBcIiBcIiArIGl0ZXJhdGUuc2lnbGEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07IC8vIG9uIHN1Y2Nlc3NcbiAgICAgICAgY2IoKVxuICAgIH1cblxuXG4gICAgaWYgKCFpdGVyYXRlLmxhdGl0dWRlKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ3RvZG8gJytjLm5vbWUpO1xuICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKGl0ZXJhdGUubm9tZSwgY2FsbGJhY2tHZW8sIG9wdGlvbnMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJleGlzdHMgXCIgKyBpdGVyYXRlLm5vbWUpXG4gICAgICAgIGNiKClcblxuICAgIH1cblxuXG59LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJva1wiKVxuICAgIH1cbn0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

"use strict";
var fs = require("fs");
var _ = require("lodash");
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.json");
var countries = require("countryjs");
var Countries = countries.all();
var all = Countries;
var tests = [all[0], all[1]];
var use = all;
var Geobuilds = [];
var continents = [];
_.map(use, function (countryjs) {
    var continent_exists = false;
    var capital;
    var country = { tz: "", capital: capital, latlng: countryjs.latlng, nativeName: countryjs.nativeName, name: countryjs.name, states: [], boundaries: [], currencies: countryjs.currencies, isoLang: countryjs.languages };
    if (country.nativeName === "Italia") {
        _.map(Regioni, function (p) {
            _.map(p.cities, function (t) {
                if (t.nativeName === "Roma") {
                    console.log("Roma");
                    country.states.push({
                        name: country.name,
                        nativeName: country.nativeName,
                        latlng: country.latlng,
                        regions: Regioni,
                        boundaries: [],
                        capital: t,
                        isoLang: country.isoLang,
                        tz: country.tz
                    });
                }
            });
        });
    }
    var subcontinent = { name: countryjs.subregion, countries: [country], boundaries: [] };
    var continent = { name: countryjs.region, subcontinents: [subcontinent], boundaries: [] };
    _.map(continents, function (cont) {
        var subcontinent_exists = false;
        if (cont.name === continent.name) {
            continent_exists = true;
            _.map(cont.subcontinents, function (sub) {
                if (sub.name === subcontinent.name) {
                    subcontinent_exists = true;
                    var country_exists_1 = false;
                    _.map(sub.countries, function (co) {
                        if (co.name === country.name) {
                            country_exists_1 = true;
                        }
                    });
                    if (!country_exists_1) {
                        subcontinent.countries.push(country);
                    }
                }
            });
            if (!subcontinent_exists) {
                continent.subcontinents.push(subcontinent);
            }
        }
    });
    if (!continent_exists) {
        continents.push(continent);
    }
});
fs.writeFile("./world.json", JSON.stringify(continents), { encoding: "utf-8" }, function (err) {
    if (err) {
        console.log(err);
    }
    else {
    }
});

//# sourceMappingURL=data:application/json;base64,

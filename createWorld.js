"use strict";
var fs = require("fs");
var _ = require("lodash");
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.json");
var countries = require("countryjs");
var Countries = countries.all();
var all = Countries;
var tests = [all[0], all[1]];
var use = all;
var Geobuilds = [];
var continents = [];
var continent_exists = false;
var subcontinent_exists = false;
var country_exists = false;
_.map(use, function (countryjs) {
    continent_exists = false;
    var Capital;
    var Country = { tz: "", capital: Capital, latlng: countryjs.latlng, nativeName: countryjs.nativeName, name: countryjs.name, states: [], boundaries: [], currencies: countryjs.currencies, isoLang: countryjs.languages };
    if (Country.name === "Italy") {
        _.map(Regioni, function (p) {
            _.map(p.cities, function (t) {
                if (t.nativeName === "Roma") {
                    console.log("Roma");
                    Country.states.push({
                        name: "Italy",
                        nativeName: "Italia",
                        latlng: Country.latlng,
                        regions: Regioni,
                        boundaries: [],
                        capital: t,
                        isoLang: Country.isoLang,
                        tz: Country.tz
                    });
                }
            });
        });
    }
    var Subcontinent = { name: countryjs.subregion, countries: [Country], boundaries: [] };
    var Continent = { name: countryjs.region, subcontinents: [Subcontinent], boundaries: [] };
    _.map(continents, function (continent) {
        subcontinent_exists = false;
        if (continent.name === Continent.name) {
            continent_exists = true;
            _.map(continent.subcontinents, function (subcontinent) {
                if (subcontinent.name === Subcontinent.name) {
                    subcontinent_exists = true;
                    country_exists = false;
                    _.map(subcontinent.countries, function (country) {
                        if (country.name === Country.name) {
                            country_exists = true;
                        }
                    });
                    if (!country_exists) {
                        console.log("country");
                        subcontinent.countries.push(Country);
                    }
                }
            });
            if (!subcontinent_exists) {
                console.log("subcontinent_exists");
                continent.subcontinents.push(Subcontinent);
            }
        }
    });
    if (!continent_exists) {
        continents.push(Continent);
        console.log("subcontinent_exists");
    }
});
fs.writeFile("./world.json", JSON.stringify(continents), { encoding: "utf-8" }, function (err) {
    if (err) {
        console.log(err);
    }
    else {
    }
});

//# sourceMappingURL=data:application/json;base64,

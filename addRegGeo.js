"use strict";
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.1.json").regioni;
var Geocodes = [];
var _ = require("lodash");
var fs = require("fs");
var all = Regioni;
var tests = [all[0], all[1], all[2]];
var use = all;
_.map(use, function (r, ri) {
    var region = { cities: [], provinces: [], name: r.nome };
    _.map(r.province, function (p, pi) {
        var province = {
            zipcode: p,
            cities: [],
            nativeName: "",
            main: {
                nativeName: "",
                latitude: 0,
                longitude: 0,
                zipcode: 0,
                cityCode: "",
                state: "",
                country: "",
                isoLang: "",
                currency: "",
                tz: "",
                currencySymbol: ""
            },
            latitude: 0,
            longitude: 0
        };
        _.map(Comuni, function (c, ci) {
            if (c.sigla === p) {
                var city_1 = {
                    cityCode: c.sigla,
                    nativeName: c.nome,
                    latitude: c.latitude,
                    longitude: c.longitude,
                    zipcode: c.cap,
                    state: c.state,
                    country: c.country,
                    isoLang: "it",
                    currencySymbol: "â‚¬",
                    currency: "Euro",
                    tz: "Europe/Rome"
                };
                province.cities.push(city_1);
                _.map(r.capoluoghi, function (ca, cai) {
                    if (ca === c.nome) {
                        province.nativeName = ca;
                        province.main = city_1;
                        region.cities.push(city_1);
                    }
                });
            }
        });
        region.provinces.push(province);
    });
    Geocodes.push(region);
});
fs.writeFileSync("./regioni.json", JSON.stringify(Geocodes), { encoding: "utf-8" });

//# sourceMappingURL=data:application/json;base64,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LENBQUMsQ0FBQTtvQkFDNUIsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQTtZQUNOLENBQUM7UUFFTCxDQUFDLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRW5DLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUV6QixDQUFDLENBQUMsQ0FBQTtBQUVGLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBIiwiZmlsZSI6ImFkZFJlZ0dlby5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW50ZXJmYWNlIElDaXR5IHtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICB6aXBjb2RlOiBudW1iZXI7XG4gICAgY2l0eUNvZGU6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICBpc29MYW5nOiBzdHJpbmc7XG4gICAgdHo6IHN0cmluZztcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xuICAgIGN1cnJlbmN5U3ltYm9sOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJR2VvIHtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgemlwY29kZTogc3RyaW5nO1xuICAgIGNpdGllczogSUNpdHlbXTtcbiAgICBtYWluOiBJQ2l0eTtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuXG59XG5cbmludGVyZmFjZSBJUmVnaW9uZSB7XG4gICAgbm9tZTogc3RyaW5nO1xuICAgIGNhcG9sdW9naGk6IHN0cmluZ1tdO1xuICAgIHByb3ZpbmNlOiBzdHJpbmdbXTtcbn1cbmludGVyZmFjZSBJR2VvY29kZXMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBwcm92aW5jZXM6IElHZW9bXTtcbiAgICBjaXRpZXM6IElDaXR5W11cbn1cbmludGVyZmFjZSBJQ29tdW5lIHtcbiAgICBub21lOiBzdHJpbmc7XG4gICAgY29kaWNlOiBudW1iZXI7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICB6b25hOiB7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICAgICAgY29kaWNlOiBudW1iZXI7XG4gICAgfSxcbiAgICByZWdpb25lOiB7XG4gICAgICAgIGNvZGljZTogbnVtYmVyO1xuICAgICAgICBub21lOiBzdHJpbmc7XG4gICAgfSxcbiAgICBjbToge1xuICAgICAgICBjb2RpY2U6IHN0cmluZztcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgIH0sXG4gICAgcHJvdmluY2lhOiB7XG4gICAgICAgIGNvZGljZTogbnVtYmVyO1xuICAgICAgICBub21lOiBzdHJpbmc7XG4gICAgfSxcbiAgICBzaWdsYTogc3RyaW5nO1xuICAgIGNvZGljZUNhdGFzdGFsZTogc3RyaW5nO1xuICAgIGNhcDogbnVtYmVyO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgY291bnRyeTogc3RyaW5nO1xuICAgIHppcGNvZGU6IHN0cmluZztcblxufVxuXG5cblxubGV0IENvbXVuaTogSUNvbXVuZVtdID0gcmVxdWlyZShcIi4vY29tdW5pLmpzb25cIik7XG5cbmxldCBSZWdpb25pOiBJUmVnaW9uZVtdID0gcmVxdWlyZShcIi4vcmVnaW9uaS4xLmpzb25cIikucmVnaW9uaTtcbmxldCBHZW9jb2RlczogSUdlb2NvZGVzW10gPSBbXTtcblxuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcblxuY29uc3QgYWxsID0gUmVnaW9uaTtcbmNvbnN0IHRlc3RzID0gW2FsbFswXSwgYWxsWzFdLCBhbGxbMl1dO1xuXG5jb25zdCB1c2UgPSBhbGw7XG4vLyB5b3UgY2FuIHVzZSBHb29nbGUgb3B0aW9ucyB0byBtYW5hZ2UgcmVzdWx0IGZvcm1hdCBcblxuXy5tYXAodXNlLCBmdW5jdGlvbiAociwgcmkpIHtcbiAgICBsZXQgcmVnaW9uOklHZW9jb2RlcyA9IHsgY2l0aWVzOiBbXSwgcHJvdmluY2VzOiBbXSwgbmFtZTogci5ub21lIH07XG5cbiAgICBfLm1hcChyLnByb3ZpbmNlLCBmdW5jdGlvbiAocCwgcGkpIHtcbiAgICAgICAgbGV0IHByb3ZpbmNlOiBJR2VvID0ge1xuICAgICAgICAgICAgemlwY29kZTogcCxcbiAgICAgICAgICAgIGNpdGllczogW10sXG4gICAgICAgICAgICBuYXRpdmVOYW1lOiBcIlwiLFxuICAgICAgICAgICAgbWFpbjoge1xuICAgICAgICAgICAgICAgIG5hdGl2ZU5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgbGF0aXR1ZGU6IDAsXG4gICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiAwLFxuICAgICAgICAgICAgICAgIHppcGNvZGU6IDAsXG4gICAgICAgICAgICAgICAgY2l0eUNvZGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgc3RhdGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgY291bnRyeTogXCJcIixcbiAgICAgICAgICAgICAgICBpc29MYW5nOiBcIlwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBcIlwiLFxuICAgICAgICAgICAgICAgIHR6OiBcIlwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5U3ltYm9sOiBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGF0aXR1ZGU6IDAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IDBcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBfLm1hcChDb211bmksIGZ1bmN0aW9uIChjLCBjaSkge1xuICAgICAgICAgICAgaWYgKGMuc2lnbGEgPT09IHApIHtcbiAgICAgICAgICAgICAgICBsZXQgY2l0eTogSUNpdHkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNpdHlDb2RlOiBjLnNpZ2xhLFxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVOYW1lOiBjLm5vbWUsXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBjLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICB6aXBjb2RlOiBjLmNhcCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGMuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnk6IGMuY291bnRyeSxcbiAgICAgICAgICAgICAgICAgICAgaXNvTGFuZzogXCJpdFwiLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeVN5bWJvbDogXCLigqxcIixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3k6IFwiRXVyb1wiLFxuICAgICAgICAgICAgICAgICAgICB0ejogXCJFdXJvcGUvUm9tZVwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwcm92aW5jZS5jaXRpZXMucHVzaChjaXR5KVxuXG4gICAgICAgICAgICAgICAgXy5tYXAoci5jYXBvbHVvZ2hpLCBmdW5jdGlvbiAoY2EsIGNhaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2EgPT09IGMubm9tZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UubmF0aXZlTmFtZSA9IGNhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UubWFpbiA9IGNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbi5jaXRpZXMucHVzaChjaXR5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgICAgICByZWdpb24ucHJvdmluY2VzLnB1c2gocHJvdmluY2UpXG5cbiAgICB9KVxuXG4gICAgR2VvY29kZXMucHVzaChyZWdpb24pXG5cbn0pXG5cbmZzLndyaXRlRmlsZVN5bmMoXCIuL3JlZ2lvbmkuanNvblwiLCBKU09OLnN0cmluZ2lmeShHZW9jb2RlcyksIHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9KVxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

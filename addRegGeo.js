"use strict";
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.1.json").regioni;
var Geocodes = [];
var _ = require("lodash");
var fs = require("fs");
var all = Regioni;
var tests = [all[0], all[1], all[2]];
var use = all;
_.map(use, function (r, ri) {
    var region = { cities: [], towns: [], name: r.nome };
    _.map(r.province, function (p, pi) {
        var province = {
            zipcode: p,
            cities: [],
            nativeName: "",
            main: {
                nativeName: "",
                latitude: 0,
                longitude: 0,
                zipcode: 0,
                cityCode: "",
                state: "",
                country: "",
                isoLang: "",
                currency: "",
                tz: "",
                currencySymbol: ""
            },
            latitude: 0,
            longitude: 0
        };
        _.map(Comuni, function (c, ci) {
            if (c.sigla === p) {
                var city_1 = {
                    cityCode: c.sigla,
                    nativeName: c.nome,
                    latitude: c.latitude,
                    longitude: c.longitude,
                    zipcode: c.cap,
                    state: c.state,
                    country: c.country,
                    isoLang: "it",
                    currencySymbol: "â‚¬",
                    currency: "Euro",
                    tz: "Europe/Rome"
                };
                province.cities.push(city_1);
                _.map(r.capoluoghi, function (ca, cai) {
                    if (ca === c.nome) {
                        province.nativeName = ca;
                        province.main = city_1;
                        region.cities.push(city_1);
                    }
                });
            }
        });
        region.towns.push(province);
    });
    Geocodes.push(region);
});
fs.writeFileSync("./regioni.json", JSON.stringify(Geocodes), { encoding: "utf-8" });

//# sourceMappingURL=data:application/json;base64,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LENBQUMsQ0FBQTtvQkFDNUIsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQTtZQUNOLENBQUM7UUFFTCxDQUFDLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRS9CLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUV6QixDQUFDLENBQUMsQ0FBQTtBQUVGLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBIiwiZmlsZSI6ImFkZFJlZ0dlby5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW50ZXJmYWNlIElDaXR5IHtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICB6aXBjb2RlOiBudW1iZXI7XG4gICAgY2l0eUNvZGU6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICBpc29MYW5nOiBzdHJpbmc7XG4gICAgdHo6IHN0cmluZztcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xuICAgIGN1cnJlbmN5U3ltYm9sOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJR2VvIHtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgemlwY29kZTogc3RyaW5nO1xuICAgIGNpdGllczogSUNpdHlbXTtcbiAgICBtYWluOiBJQ2l0eTtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuXG59XG5cbmludGVyZmFjZSBJUmVnaW9uZSB7XG4gICAgbm9tZTogc3RyaW5nO1xuICAgIGNhcG9sdW9naGk6IHN0cmluZ1tdO1xuICAgIHByb3ZpbmNlOiBzdHJpbmdbXTtcbn1cbmludGVyZmFjZSBJR2VvY29kZXMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0b3duczogSUdlb1tdO1xuICAgIGNpdGllczogSUNpdHlbXVxufVxuaW50ZXJmYWNlIElDb211bmUge1xuICAgIG5vbWU6IHN0cmluZztcbiAgICBjb2RpY2U6IG51bWJlcjtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIHpvbmE6IHtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICB9LFxuICAgIHJlZ2lvbmU6IHtcbiAgICAgICAgY29kaWNlOiBudW1iZXI7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICB9LFxuICAgIGNtOiB7XG4gICAgICAgIGNvZGljZTogc3RyaW5nO1xuICAgICAgICBub21lOiBzdHJpbmc7XG4gICAgfSxcbiAgICBwcm92aW5jaWE6IHtcbiAgICAgICAgY29kaWNlOiBudW1iZXI7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICB9LFxuICAgIHNpZ2xhOiBzdHJpbmc7XG4gICAgY29kaWNlQ2F0YXN0YWxlOiBzdHJpbmc7XG4gICAgY2FwOiBudW1iZXI7XG4gICAgc3RhdGU6IHN0cmluZztcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgemlwY29kZTogc3RyaW5nO1xuXG59XG5cblxuXG5sZXQgQ29tdW5pOiBJQ29tdW5lW10gPSByZXF1aXJlKFwiLi9jb211bmkuanNvblwiKTtcblxubGV0IFJlZ2lvbmk6IElSZWdpb25lW10gPSByZXF1aXJlKFwiLi9yZWdpb25pLjEuanNvblwiKS5yZWdpb25pO1xubGV0IEdlb2NvZGVzOiBJR2VvY29kZXNbXSA9IFtdO1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuXG5jb25zdCBhbGwgPSBSZWdpb25pO1xuY29uc3QgdGVzdHMgPSBbYWxsWzBdLCBhbGxbMV0sIGFsbFsyXV07XG5cbmNvbnN0IHVzZSA9IGFsbDtcbi8vIHlvdSBjYW4gdXNlIEdvb2dsZSBvcHRpb25zIHRvIG1hbmFnZSByZXN1bHQgZm9ybWF0IFxuXG5fLm1hcCh1c2UsIGZ1bmN0aW9uIChyLCByaSkge1xuICAgIGxldCByZWdpb24gPSB7IGNpdGllczogW10sIHRvd25zOiBbXSwgbmFtZTogci5ub21lIH07XG5cbiAgICBfLm1hcChyLnByb3ZpbmNlLCBmdW5jdGlvbiAocCwgcGkpIHtcbiAgICAgICAgbGV0IHByb3ZpbmNlOiBJR2VvID0ge1xuICAgICAgICAgICAgemlwY29kZTogcCxcbiAgICAgICAgICAgIGNpdGllczogW10sXG4gICAgICAgICAgICBuYXRpdmVOYW1lOiBcIlwiLFxuICAgICAgICAgICAgbWFpbjoge1xuICAgICAgICAgICAgICAgIG5hdGl2ZU5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgbGF0aXR1ZGU6IDAsXG4gICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiAwLFxuICAgICAgICAgICAgICAgIHppcGNvZGU6IDAsXG4gICAgICAgICAgICAgICAgY2l0eUNvZGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgc3RhdGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgY291bnRyeTogXCJcIixcbiAgICAgICAgICAgICAgICBpc29MYW5nOiBcIlwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBcIlwiLFxuICAgICAgICAgICAgICAgIHR6OiBcIlwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5U3ltYm9sOiBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGF0aXR1ZGU6IDAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IDBcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBfLm1hcChDb211bmksIGZ1bmN0aW9uIChjLCBjaSkge1xuICAgICAgICAgICAgaWYgKGMuc2lnbGEgPT09IHApIHtcbiAgICAgICAgICAgICAgICBsZXQgY2l0eTogSUNpdHkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNpdHlDb2RlOiBjLnNpZ2xhLFxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVOYW1lOiBjLm5vbWUsXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBjLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICB6aXBjb2RlOiBjLmNhcCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGMuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnk6IGMuY291bnRyeSxcbiAgICAgICAgICAgICAgICAgICAgaXNvTGFuZzogXCJpdFwiLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeVN5bWJvbDogXCLigqxcIixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3k6IFwiRXVyb1wiLFxuICAgICAgICAgICAgICAgICAgICB0ejogXCJFdXJvcGUvUm9tZVwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwcm92aW5jZS5jaXRpZXMucHVzaChjaXR5KVxuXG4gICAgICAgICAgICAgICAgXy5tYXAoci5jYXBvbHVvZ2hpLCBmdW5jdGlvbiAoY2EsIGNhaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2EgPT09IGMubm9tZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UubmF0aXZlTmFtZSA9IGNhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UubWFpbiA9IGNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbi5jaXRpZXMucHVzaChjaXR5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgICAgICByZWdpb24udG93bnMucHVzaChwcm92aW5jZSlcblxuICAgIH0pXG5cbiAgICBHZW9jb2Rlcy5wdXNoKHJlZ2lvbilcblxufSlcblxuZnMud3JpdGVGaWxlU3luYyhcIi4vcmVnaW9uaS5qc29uXCIsIEpTT04uc3RyaW5naWZ5KEdlb2NvZGVzKSwgeyBlbmNvZGluZzogXCJ1dGYtOFwiIH0pXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

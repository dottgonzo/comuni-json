"use strict";
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.1.json").regioni;
var Geocodes = [];
var _ = require("lodash");
var fs = require("fs");
var all = Regioni;
var test = [Regioni[0], Regioni[1], Regioni[2]];
var use = all;
_.map(use, function (r, ri) {
    var region = { cities: [], towns: [], name: r.nome };
    _.map(r.province, function (p, pi) {
        var province = {
            code: p,
            cities: [],
            city: "",
            main: {
                city: "",
                latitude: 0,
                longitude: 0,
                cap: 0,
                cityCode: ""
            },
            latitude: 0,
            longitude: 0
        };
        _.map(Comuni, function (c, ci) {
            if (c.sigla === p) {
                var city_1 = { cityCode: c.sigla, city: c.nome, latitude: c.latitude, longitude: c.longitude, cap: c.cap };
                province.cities.push(city_1);
                _.map(r.capoluoghi, function (ca, cai) {
                    if (ca === c.nome) {
                        province.city = ca;
                        province.main = city_1;
                        region.cities.push(city_1);
                    }
                });
            }
        });
        region.towns.push(province);
    });
    Geocodes.push(region);
});
fs.writeFileSync("./regioni.json", JSON.stringify(Geocodes), { encoding: "utf-8" });

//# sourceMappingURL=data:application/json;base64,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USxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUEiLCJmaWxlIjoiYWRkUmVnR2VvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbnRlcmZhY2UgSUNpdHkge1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIGNhcDogbnVtYmVyO1xuICAgIGNpdHlDb2RlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJR2VvIHtcbiAgICBjaXR5OiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIGNpdGllczogSUNpdHlbXTtcbiAgICBtYWluOiBJQ2l0eTtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuXG59XG5cbmludGVyZmFjZSBJUmVnaW9uZSB7XG4gICAgbm9tZTogc3RyaW5nO1xuICAgIGNhcG9sdW9naGk6IHN0cmluZ1tdO1xuICAgIHByb3ZpbmNlOiBzdHJpbmdbXTtcbn1cbmludGVyZmFjZSBJR2VvY29kZXMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0b3duczogSUdlb1tdO1xuICAgIGNpdGllczogSUNpdHlbXVxufVxuaW50ZXJmYWNlIElDb211bmUge1xuICAgIG5vbWU6IHN0cmluZztcbiAgICBjb2RpY2U6IG51bWJlcjtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIHpvbmE6IHtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICB9LFxuICAgIHJlZ2lvbmU6IHtcbiAgICAgICAgY29kaWNlOiBudW1iZXI7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICB9LFxuICAgIGNtOiB7XG4gICAgICAgIGNvZGljZTogc3RyaW5nO1xuICAgICAgICBub21lOiBzdHJpbmc7XG4gICAgfSxcbiAgICBwcm92aW5jaWE6IHtcbiAgICAgICAgY29kaWNlOiBudW1iZXI7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICB9LFxuICAgIHNpZ2xhOiBzdHJpbmc7XG4gICAgY29kaWNlQ2F0YXN0YWxlOiBzdHJpbmc7XG4gICAgY2FwOiBudW1iZXI7XG59XG5cblxuXG5sZXQgQ29tdW5pOiBJQ29tdW5lW10gPSByZXF1aXJlKFwiLi9jb211bmkuanNvblwiKTtcblxubGV0IFJlZ2lvbmk6IElSZWdpb25lW10gPSByZXF1aXJlKFwiLi9yZWdpb25pLjEuanNvblwiKS5yZWdpb25pO1xubGV0IEdlb2NvZGVzOiBJR2VvY29kZXNbXSA9IFtdO1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuXG5jb25zdCBhbGwgPSBSZWdpb25pO1xuY29uc3QgdGVzdCA9IFtSZWdpb25pWzBdLCBSZWdpb25pWzFdLCBSZWdpb25pWzJdXTtcblxuY29uc3QgdXNlID0gYWxsO1xuLy8geW91IGNhbiB1c2UgR29vZ2xlIG9wdGlvbnMgdG8gbWFuYWdlIHJlc3VsdCBmb3JtYXQgXG5cbl8ubWFwKHVzZSwgZnVuY3Rpb24gKHIsIHJpKSB7XG4gICAgbGV0IHJlZ2lvbiA9IHsgY2l0aWVzOiBbXSwgdG93bnM6IFtdLCBuYW1lOiByLm5vbWUgfTtcblxuICAgIF8ubWFwKHIucHJvdmluY2UsIGZ1bmN0aW9uIChwLCBwaSkge1xuICAgICAgICBsZXQgcHJvdmluY2U6IElHZW8gPSB7XG4gICAgICAgICAgICBjb2RlOiBwLFxuICAgICAgICAgICAgY2l0aWVzOiBbXSxcbiAgICAgICAgICAgIGNpdHk6IFwiXCIsXG4gICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgY2l0eTogXCJcIixcbiAgICAgICAgICAgICAgICBsYXRpdHVkZTogMCxcbiAgICAgICAgICAgICAgICBsb25naXR1ZGU6IDAsXG4gICAgICAgICAgICAgICAgY2FwOiAwLFxuICAgICAgICAgICAgICAgIGNpdHlDb2RlOiBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGF0aXR1ZGU6IDAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IDBcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBfLm1hcChDb211bmksIGZ1bmN0aW9uIChjLCBjaSkge1xuICAgICAgICAgICAgaWYgKGMuc2lnbGEgPT09IHApIHtcbiAgICAgICAgICAgICAgICBsZXQgY2l0eSA9IHsgY2l0eUNvZGU6IGMuc2lnbGEsIGNpdHk6IGMubm9tZSwgbGF0aXR1ZGU6IGMubGF0aXR1ZGUsIGxvbmdpdHVkZTogYy5sb25naXR1ZGUsIGNhcDogYy5jYXAgfTtcbiAgICAgICAgICAgICAgICBwcm92aW5jZS5jaXRpZXMucHVzaChjaXR5KVxuXG4gICAgICAgICAgICAgICAgXy5tYXAoci5jYXBvbHVvZ2hpLCBmdW5jdGlvbiAoY2EsIGNhaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2EgPT09IGMubm9tZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UuY2l0eSA9IGNhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UubWFpbiA9IGNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbi5jaXRpZXMucHVzaChjaXR5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgICAgICByZWdpb24udG93bnMucHVzaChwcm92aW5jZSlcblxuICAgIH0pXG5cbiAgICBHZW9jb2Rlcy5wdXNoKHJlZ2lvbilcblxufSlcblxuZnMud3JpdGVGaWxlU3luYyhcIi4vcmVnaW9uaS5qc29uXCIsIEpTT04uc3RyaW5naWZ5KEdlb2NvZGVzKSwgeyBlbmNvZGluZzogXCJ1dGYtOFwiIH0pXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

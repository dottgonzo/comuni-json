"use strict";
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.1.json").regioni;
var Geocodes = [];
var _ = require("lodash");
var fs = require("fs");
var all = Regioni;
var tests = [all[0], all[1], all[2]];
var use = all;
_.map(use, function (r, ri) {
    var region = { cities: [], provinces: [], name: r.nome, state: "Italy", subcontinent: 'Southern Europe', continent: "Europe", country: "Italy" };
    _.map(r.province, function (p, pi) {
        var province = {
            zipcode: p,
            cities: [],
            nativeName: "",
            main: {
                nativeName: "",
                latitude: 0,
                longitude: 0,
                zipcode: 0,
                cityCode: "",
                state: "Italy",
                country: "Italy",
                isoLang: "it",
                currency: "euro",
                tz: "Europe/Rome",
                region: r.nome,
                currencySymbol: "€",
                continent: "Europe",
                subcontinent: "Southern Europe"
            },
            latitude: 0,
            longitude: 0
        };
        _.map(Comuni, function (c, ci) {
            if (c.sigla === p) {
                var city_1 = {
                    cityCode: c.sigla,
                    nativeName: c.nome,
                    latitude: c.latitude,
                    longitude: c.longitude,
                    zipcode: c.cap,
                    state: "Italy",
                    country: "Italy",
                    isoLang: "it",
                    region: r.nome,
                    currencySymbol: "€",
                    currency: "Euro",
                    tz: "Europe/Rome",
                    subcontinent: 'Southern Europe',
                    continent: "Europe"
                };
                province.cities.push(city_1);
                _.map(r.capoluoghi, function (ca, cai) {
                    if (ca === c.nome) {
                        province.nativeName = ca;
                        province.main = city_1;
                        region.cities.push(city_1);
                    }
                });
            }
        });
        region.provinces.push(province);
    });
    Geocodes.push(region);
});
fs.writeFileSync("./regioni.json", JSON.stringify(Geocodes), { encoding: "utf-8" });

//# sourceMappingURL=data:application/json;base64,

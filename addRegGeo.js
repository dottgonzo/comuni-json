"use strict";
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.1.json").regioni;
var Geocodes = [];
var _ = require("lodash");
var fs = require("fs");
var all = Regioni;
var tests = [all[0], all[1], all[2]];
var use = all;
_.map(use, function (r, ri) {
    var region = { cities: [], provinces: [], name: r.nome };
    _.map(r.province, function (p, pi) {
        var province = {
            zipcode: p,
            cities: [],
            nativeName: "",
            main: {
                nativeName: "",
                latitude: 0,
                longitude: 0,
                zipcode: 0,
                cityCode: "",
                state: "Italy",
                country: "Italy",
                isoLang: "",
                currency: "",
                tz: "",
                region: r.nome,
                currencySymbol: ""
            },
            latitude: 0,
            longitude: 0
        };
        _.map(Comuni, function (c, ci) {
            if (c.sigla === p) {
                var city_1 = {
                    cityCode: c.sigla,
                    nativeName: c.nome,
                    latitude: c.latitude,
                    longitude: c.longitude,
                    zipcode: c.cap,
                    state: "Italy",
                    country: "Italy",
                    isoLang: "it",
                    region: r.nome,
                    currencySymbol: "â‚¬",
                    currency: "Euro",
                    tz: "Europe/Rome"
                };
                province.cities.push(city_1);
                _.map(r.capoluoghi, function (ca, cai) {
                    if (ca === c.nome) {
                        province.nativeName = ca;
                        province.main = city_1;
                        region.cities.push(city_1);
                    }
                });
            }
        });
        region.provinces.push(province);
    });
    Geocodes.push(region);
});
fs.writeFileSync("./regioni.json", JSON.stringify(Geocodes), { encoding: "utf-8" });

//# sourceMappingURL=data:application/json;base64,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QTt3QkFDcEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBSSxDQUFDLENBQUE7b0JBQzVCLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUE7WUFDTixDQUFDO1FBRUwsQ0FBQyxDQUFDLENBQUE7UUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUVuQyxDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7QUFFekIsQ0FBQyxDQUFDLENBQUE7QUFFRixFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQSIsImZpbGUiOiJhZGRSZWdHZW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmludGVyZmFjZSBJQ2l0eSB7XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgemlwY29kZTogbnVtYmVyO1xuICAgIGNpdHlDb2RlOiBzdHJpbmc7XG4gICAgc3RhdGU6IHN0cmluZztcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgaXNvTGFuZzogc3RyaW5nO1xuICAgIHR6OiBzdHJpbmc7XG4gICAgY3VycmVuY3k6IHN0cmluZztcbiAgICBjdXJyZW5jeVN5bWJvbDogc3RyaW5nO1xuICAgIHJlZ2lvbjogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSUdlbyB7XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIHppcGNvZGU6IHN0cmluZztcbiAgICBjaXRpZXM6IElDaXR5W107XG4gICAgbWFpbjogSUNpdHk7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcblxufVxuXG5pbnRlcmZhY2UgSVJlZ2lvbmUge1xuICAgIG5vbWU6IHN0cmluZztcbiAgICBjYXBvbHVvZ2hpOiBzdHJpbmdbXTtcbiAgICBwcm92aW5jZTogc3RyaW5nW107XG59XG5pbnRlcmZhY2UgSUdlb2NvZGVzIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcHJvdmluY2VzOiBJR2VvW107XG4gICAgY2l0aWVzOiBJQ2l0eVtdXG59XG5pbnRlcmZhY2UgSUNvbXVuZSB7XG4gICAgbm9tZTogc3RyaW5nO1xuICAgIGNvZGljZTogbnVtYmVyO1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgem9uYToge1xuICAgICAgICBub21lOiBzdHJpbmc7XG4gICAgICAgIGNvZGljZTogbnVtYmVyO1xuICAgIH0sXG4gICAgcmVnaW9uZToge1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgIH0sXG4gICAgY206IHtcbiAgICAgICAgY29kaWNlOiBzdHJpbmc7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICB9LFxuICAgIHByb3ZpbmNpYToge1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgIH0sXG4gICAgc2lnbGE6IHN0cmluZztcbiAgICBjb2RpY2VDYXRhc3RhbGU6IHN0cmluZztcbiAgICBjYXA6IG51bWJlcjtcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICB6aXBjb2RlOiBzdHJpbmc7XG5cbn1cblxuXG5cbmxldCBDb211bmk6IElDb211bmVbXSA9IHJlcXVpcmUoXCIuL2NvbXVuaS5qc29uXCIpO1xuXG5sZXQgUmVnaW9uaTogSVJlZ2lvbmVbXSA9IHJlcXVpcmUoXCIuL3JlZ2lvbmkuMS5qc29uXCIpLnJlZ2lvbmk7XG5sZXQgR2VvY29kZXM6IElHZW9jb2Rlc1tdID0gW107XG5cbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5cbmNvbnN0IGFsbCA9IFJlZ2lvbmk7XG5jb25zdCB0ZXN0cyA9IFthbGxbMF0sIGFsbFsxXSwgYWxsWzJdXTtcblxuY29uc3QgdXNlID0gYWxsO1xuLy8geW91IGNhbiB1c2UgR29vZ2xlIG9wdGlvbnMgdG8gbWFuYWdlIHJlc3VsdCBmb3JtYXQgXG5cbl8ubWFwKHVzZSwgZnVuY3Rpb24gKHIsIHJpKSB7XG4gICAgbGV0IHJlZ2lvbjogSUdlb2NvZGVzID0geyBjaXRpZXM6IFtdLCBwcm92aW5jZXM6IFtdLCBuYW1lOiByLm5vbWUgfTtcblxuICAgIF8ubWFwKHIucHJvdmluY2UsIGZ1bmN0aW9uIChwLCBwaSkge1xuICAgICAgICBsZXQgcHJvdmluY2U6IElHZW8gPSB7XG4gICAgICAgICAgICB6aXBjb2RlOiBwLFxuICAgICAgICAgICAgY2l0aWVzOiBbXSxcbiAgICAgICAgICAgIG5hdGl2ZU5hbWU6IFwiXCIsXG4gICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgbmF0aXZlTmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICBsYXRpdHVkZTogMCxcbiAgICAgICAgICAgICAgICBsb25naXR1ZGU6IDAsXG4gICAgICAgICAgICAgICAgemlwY29kZTogMCxcbiAgICAgICAgICAgICAgICBjaXR5Q29kZTogXCJcIixcbiAgICAgICAgICAgICAgICBzdGF0ZTogXCJJdGFseVwiLFxuICAgICAgICAgICAgICAgIGNvdW50cnk6IFwiSXRhbHlcIixcbiAgICAgICAgICAgICAgICBpc29MYW5nOiBcIlwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBcIlwiLFxuICAgICAgICAgICAgICAgIHR6OiBcIlwiLFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogci5ub21lLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5U3ltYm9sOiBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGF0aXR1ZGU6IDAsXG4gICAgICAgICAgICBsb25naXR1ZGU6IDBcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBfLm1hcChDb211bmksIGZ1bmN0aW9uIChjLCBjaSkge1xuICAgICAgICAgICAgaWYgKGMuc2lnbGEgPT09IHApIHtcbiAgICAgICAgICAgICAgICBsZXQgY2l0eTogSUNpdHkgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNpdHlDb2RlOiBjLnNpZ2xhLFxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVOYW1lOiBjLm5vbWUsXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBjLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICB6aXBjb2RlOiBjLmNhcCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IFwiSXRhbHlcIixcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeTogXCJJdGFseVwiLFxuICAgICAgICAgICAgICAgICAgICBpc29MYW5nOiBcIml0XCIsXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogci5ub21lLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeVN5bWJvbDogXCLigqxcIixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3k6IFwiRXVyb1wiLFxuICAgICAgICAgICAgICAgICAgICB0ejogXCJFdXJvcGUvUm9tZVwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwcm92aW5jZS5jaXRpZXMucHVzaChjaXR5KVxuXG4gICAgICAgICAgICAgICAgXy5tYXAoci5jYXBvbHVvZ2hpLCBmdW5jdGlvbiAoY2EsIGNhaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2EgPT09IGMubm9tZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UubmF0aXZlTmFtZSA9IGNhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2UubWFpbiA9IGNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbi5jaXRpZXMucHVzaChjaXR5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgICAgICByZWdpb24ucHJvdmluY2VzLnB1c2gocHJvdmluY2UpXG5cbiAgICB9KVxuXG4gICAgR2VvY29kZXMucHVzaChyZWdpb24pXG5cbn0pXG5cbmZzLndyaXRlRmlsZVN5bmMoXCIuL3JlZ2lvbmkuanNvblwiLCBKU09OLnN0cmluZ2lmeShHZW9jb2RlcyksIHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9KVxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

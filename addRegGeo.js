"use strict";
var Comuni = require("./comuni.json");
var Regioni = require("./regioni.1.json").regioni;
var Geocodes = [];
var _ = require("lodash");
var fs = require("fs");
var all = Regioni;
var test = [Regioni[0], Regioni[1], Regioni[2]];
var use = all;
_.map(use, function (r, ri) {
    var region = { cities: [], towns: [], name: r.nome };
    _.map(r.province, function (p, pi) {
        var province = {
            zipcode: p,
            cities: [],
            name: "",
            main: {
                name: "",
                latitude: 0,
                longitude: 0,
                zipcode: 0,
                cityCode: "",
                state: "",
                country: "",
                isoLang: "",
                currency: "",
                tz: "",
                currencySymbol: ""
            },
            latitude: 0,
            longitude: 0
        };
        _.map(Comuni, function (c, ci) {
            if (c.sigla === p) {
                var city_1 = {
                    cityCode: c.sigla,
                    name: c.nome,
                    latitude: c.latitude,
                    longitude: c.longitude,
                    zipcode: c.cap,
                    state: c.state,
                    country: c.country,
                    isoLang: "it",
                    currencySymbol: "â‚¬",
                    currency: "Euro",
                    tz: "Europe/Rome"
                };
                province.cities.push(city_1);
                _.map(r.capoluoghi, function (ca, cai) {
                    if (ca === c.nome) {
                        province.name = ca;
                        province.main = city_1;
                        region.cities.push(city_1);
                    }
                });
            }
        });
        region.towns.push(province);
    });
    Geocodes.push(region);
});
fs.writeFileSync("./regioni.json", JSON.stringify(Geocodes), { encoding: "utf-8" });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZFJlZ0dlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBbUVBLElBQUksTUFBTSxHQUFjLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUVqRCxJQUFJLE9BQU8sR0FBZSxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDOUQsSUFBSSxRQUFRLEdBQWdCLEVBQUUsQ0FBQztBQUUvQixJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUM1QixJQUFZLEVBQUUsV0FBTSxJQUFJLENBQUMsQ0FBQTtBQUV6QixJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUM7QUFDcEIsSUFBTSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWxELElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUdoQixDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFO0lBQ3RCLElBQUksTUFBTSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFckQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxRQUFRLEdBQVM7WUFDakIsT0FBTyxFQUFFLENBQUM7WUFDVixNQUFNLEVBQUUsRUFBRTtZQUNWLElBQUksRUFBRSxFQUFFO1lBQ1IsSUFBSSxFQUFFO2dCQUNGLElBQUksRUFBRSxFQUFFO2dCQUNSLFFBQVEsRUFBRSxDQUFDO2dCQUNYLFNBQVMsRUFBRSxDQUFDO2dCQUNaLE9BQU8sRUFBRSxDQUFDO2dCQUNWLFFBQVEsRUFBRSxFQUFFO2dCQUNaLEtBQUssRUFBRSxFQUFFO2dCQUNULE9BQU8sRUFBRSxFQUFFO2dCQUNYLE9BQU8sRUFBRSxFQUFFO2dCQUNYLFFBQVEsRUFBRSxFQUFFO2dCQUNaLEVBQUUsRUFBRSxFQUFFO2dCQUNOLGNBQWMsRUFBRSxFQUFFO2FBQ3JCO1lBQ0QsUUFBUSxFQUFFLENBQUM7WUFDWCxTQUFTLEVBQUUsQ0FBQztTQUNmLENBQUE7UUFJRCxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFO1lBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxNQUFJLEdBQVU7b0JBQ2QsUUFBUSxFQUFFLENBQUMsQ0FBQyxLQUFLO29CQUNqQixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7b0JBQ1osUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRO29CQUNwQixTQUFTLEVBQUUsQ0FBQyxDQUFDLFNBQVM7b0JBQ3RCLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRztvQkFDZCxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUs7b0JBQ2QsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPO29CQUNsQixPQUFPLEVBQUUsSUFBSTtvQkFDYixjQUFjLEVBQUUsR0FBRztvQkFDbkIsUUFBUSxFQUFFLE1BQU07b0JBQ2hCLEVBQUUsRUFBRSxhQUFhO2lCQUNwQixDQUFDO2dCQUNGLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQUksQ0FBQyxDQUFBO2dCQUUxQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLEVBQUUsR0FBRztvQkFDakMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNoQixRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQzt3QkFDbkIsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFJLENBQUE7d0JBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQUksQ0FBQyxDQUFBO29CQUM1QixDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQztRQUVMLENBQUMsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFL0IsQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXpCLENBQUMsQ0FBQyxDQUFBO0FBRUYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUEiLCJmaWxlIjoiYWRkUmVnR2VvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbnRlcmZhY2UgSUNpdHkge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIHppcGNvZGU6IG51bWJlcjtcbiAgICBjaXR5Q29kZTogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgY291bnRyeTogc3RyaW5nO1xuICAgIGlzb0xhbmc6IHN0cmluZztcbiAgICB0ejogc3RyaW5nO1xuICAgIGN1cnJlbmN5OiBzdHJpbmc7XG4gICAgY3VycmVuY3lTeW1ib2w6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElHZW8ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB6aXBjb2RlOiBzdHJpbmc7XG4gICAgY2l0aWVzOiBJQ2l0eVtdO1xuICAgIG1haW46IElDaXR5O1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG5cbn1cblxuaW50ZXJmYWNlIElSZWdpb25lIHtcbiAgICBub21lOiBzdHJpbmc7XG4gICAgY2Fwb2x1b2doaTogc3RyaW5nW107XG4gICAgcHJvdmluY2U6IHN0cmluZ1tdO1xufVxuaW50ZXJmYWNlIElHZW9jb2RlcyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHRvd25zOiBJR2VvW107XG4gICAgY2l0aWVzOiBJQ2l0eVtdXG59XG5pbnRlcmZhY2UgSUNvbXVuZSB7XG4gICAgbm9tZTogc3RyaW5nO1xuICAgIGNvZGljZTogbnVtYmVyO1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgem9uYToge1xuICAgICAgICBub21lOiBzdHJpbmc7XG4gICAgICAgIGNvZGljZTogbnVtYmVyO1xuICAgIH0sXG4gICAgcmVnaW9uZToge1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgIH0sXG4gICAgY206IHtcbiAgICAgICAgY29kaWNlOiBzdHJpbmc7XG4gICAgICAgIG5vbWU6IHN0cmluZztcbiAgICB9LFxuICAgIHByb3ZpbmNpYToge1xuICAgICAgICBjb2RpY2U6IG51bWJlcjtcbiAgICAgICAgbm9tZTogc3RyaW5nO1xuICAgIH0sXG4gICAgc2lnbGE6IHN0cmluZztcbiAgICBjb2RpY2VDYXRhc3RhbGU6IHN0cmluZztcbiAgICBjYXA6IG51bWJlcjtcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICB6aXBjb2RlOiBzdHJpbmc7XG5cbn1cblxuXG5cbmxldCBDb211bmk6IElDb211bmVbXSA9IHJlcXVpcmUoXCIuL2NvbXVuaS5qc29uXCIpO1xuXG5sZXQgUmVnaW9uaTogSVJlZ2lvbmVbXSA9IHJlcXVpcmUoXCIuL3JlZ2lvbmkuMS5qc29uXCIpLnJlZ2lvbmk7XG5sZXQgR2VvY29kZXM6IElHZW9jb2Rlc1tdID0gW107XG5cbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5cbmNvbnN0IGFsbCA9IFJlZ2lvbmk7XG5jb25zdCB0ZXN0ID0gW1JlZ2lvbmlbMF0sIFJlZ2lvbmlbMV0sIFJlZ2lvbmlbMl1dO1xuXG5jb25zdCB1c2UgPSBhbGw7XG4vLyB5b3UgY2FuIHVzZSBHb29nbGUgb3B0aW9ucyB0byBtYW5hZ2UgcmVzdWx0IGZvcm1hdCBcblxuXy5tYXAodXNlLCBmdW5jdGlvbiAociwgcmkpIHtcbiAgICBsZXQgcmVnaW9uID0geyBjaXRpZXM6IFtdLCB0b3duczogW10sIG5hbWU6IHIubm9tZSB9O1xuXG4gICAgXy5tYXAoci5wcm92aW5jZSwgZnVuY3Rpb24gKHAsIHBpKSB7XG4gICAgICAgIGxldCBwcm92aW5jZTogSUdlbyA9IHtcbiAgICAgICAgICAgIHppcGNvZGU6IHAsXG4gICAgICAgICAgICBjaXRpZXM6IFtdLFxuICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgIG1haW46IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIGxhdGl0dWRlOiAwLFxuICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogMCxcbiAgICAgICAgICAgICAgICB6aXBjb2RlOiAwLFxuICAgICAgICAgICAgICAgIGNpdHlDb2RlOiBcIlwiLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBcIlwiLFxuICAgICAgICAgICAgICAgIGNvdW50cnk6IFwiXCIsXG4gICAgICAgICAgICAgICAgaXNvTGFuZzogXCJcIixcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogXCJcIixcbiAgICAgICAgICAgICAgICB0ejogXCJcIixcbiAgICAgICAgICAgICAgICBjdXJyZW5jeVN5bWJvbDogXCJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhdGl0dWRlOiAwLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAwXG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgXy5tYXAoQ29tdW5pLCBmdW5jdGlvbiAoYywgY2kpIHtcbiAgICAgICAgICAgIGlmIChjLnNpZ2xhID09PSBwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNpdHk6IElDaXR5ID0ge1xuICAgICAgICAgICAgICAgICAgICBjaXR5Q29kZTogYy5zaWdsYSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYy5ub21lLFxuICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogYy5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBjLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgemlwY29kZTogYy5jYXAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBjLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5OiBjLmNvdW50cnksXG4gICAgICAgICAgICAgICAgICAgIGlzb0xhbmc6IFwiaXRcIixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3lTeW1ib2w6IFwi4oKsXCIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBcIkV1cm9cIixcbiAgICAgICAgICAgICAgICAgICAgdHo6IFwiRXVyb3BlL1JvbWVcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcHJvdmluY2UuY2l0aWVzLnB1c2goY2l0eSlcblxuICAgICAgICAgICAgICAgIF8ubWFwKHIuY2Fwb2x1b2doaSwgZnVuY3Rpb24gKGNhLCBjYWkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhID09PSBjLm5vbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlLm5hbWUgPSBjYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlLm1haW4gPSBjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb24uY2l0aWVzLnB1c2goY2l0eSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSlcbiAgICAgICAgcmVnaW9uLnRvd25zLnB1c2gocHJvdmluY2UpXG5cbiAgICB9KVxuXG4gICAgR2VvY29kZXMucHVzaChyZWdpb24pXG5cbn0pXG5cbmZzLndyaXRlRmlsZVN5bmMoXCIuL3JlZ2lvbmkuanNvblwiLCBKU09OLnN0cmluZ2lmeShHZW9jb2RlcyksIHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9KVxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
